# file: .github/workflows/build_dev.yml
name: Build TVTower DEV-packs for all OSes

on:
  # manual trigger
  workflow_dispatch:
    inputs:
      # option for BlitzMax NG version
      bmx-ver:
        description: BlitzMax Version
        default: latest
        required: false
  # commits of new tags (versions)
  #push:
  #  inputs:
  #    # option for BlitzMax NG version
  #    bmx-ver:
  #      description: BlitzMax Version
  #      default: latest
  #      required: false


jobs:
  job-build-linux-x64:
    #disable for now
    #if: ${{ false }}
    name: "Build Linux x64 Binary"
    runs-on: ubuntu-18.04 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Update and install libraries
      uses: ./.github/actions/prepare-linux-libs
      id: prepare-os
      with:
        bmx-version: ${{ github.event.inputs.bmx-ver }}
        target-architecture: x64
        
    - name: Setup latest BlitzMax NG version
      uses: gwron/setup-blitzmax-action@v1
      id: bmx # set step reference ID
      with:
        bmx-version: ${{ github.event.inputs.bmx-ver }}
        
    
    - name: Cache/Recreate Module Prebuilds
      id: cache-mod-linux-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-mod-linux-x64
      with:
        path: ${{ steps.bmx.outputs.bmx-root }}/mod
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Cache/Restore source/.bmx Cache
      id: cache-source-bmx-linux-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-source-bmx-linux-x64
      with:
        path: ${{ github.workspace }}\source\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}    
    
    - name: Cache/Restore Dig/.bmx Cache
      id: cache-source-dig-bmx-linux-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-source-dig-bmx-linux-x64
      with:
        path: ${{ github.workspace }}\source\Dig\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    
    - name: Compile TVTower (from checked out repo)
      run: |
        bmk makeapp -r -g x64 -t gui TVTower.bmx

    - name: Archive production artifacts (bin only)
      uses: actions/upload-artifact@v2
      with:
        name: TVTower_Linux64
        path: TVTower_Linux64
        retention-days: 1


  job-build-linux-i386:
    #disable for now
    #if: ${{ false }}
    name: "Build Linux i386 Binary"
    #runs-on: ubuntu-latest
    runs-on: ubuntu-18.04 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Update and install libraries
      uses: ./.github/actions/prepare-linux-libs
      id: prepare-os
      with:
        bmx-version: ${{ github.event.inputs.bmx-ver }}
        target-architecture: i386

    - name: Setup latest BlitzMax NG version
      uses: gwron/setup-blitzmax-action@v1
      id: bmx # set step reference ID
      with:
        bmx-version: ${{ github.event.inputs.bmx-ver }}


    - name: Cache/Recreate Module Prebuilds
      id: cache-mod-linux-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-mod-linux-i386
      with:
        path: ${{ steps.bmx.outputs.bmx-root }}/mod
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Cache/Restore source/.bmx Cache
      id: cache-source-bmx-linux-i386
      uses: actions/cache@v2
      env:
        cache-name: cache-source-bmx-linux-i386
      with:
        path: ${{ github.workspace }}\source\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}    
    
    - name: Cache/Restore Dig/.bmx Cache
      id: cache-source-dig-bmx-linux-i386
      uses: actions/cache@v2
      env:
        cache-name: cache-source-dig-bmx-linux-i386
      with:
        path: ${{ github.workspace }}\source\Dig\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    

    - name: Compile TVTower (from checked out repo)
      run: |
        bmk makeapp -r -g x86 -t gui TVTower.bmx
        

    - name: Archive production artifacts (bin only)
      uses: actions/upload-artifact@v2
      with:
        name: TVTower_Linux32
        path: TVTower_Linux32
        retention-days: 1


  job-build-windows-x64:
    #disable for now
    #if: ${{ false }}
    name: "Build Windows 64 Bit Binary"
    runs-on: windows-latest 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Setup latest BlitzMax NG version
      uses: gwron/setup-blitzmax-action@master
      id: bmx # set step reference ID
      with:
        bmx-version: ${{ github.event.inputs.bmx-ver }}
        
    
    - name: Cache/Restore Module Prebuilds
      id: cache-mod-windows-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-mod-windows-x64
      with:
        path: ${{ steps.bmx.outputs.bmx-root }}/mod
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    
    - name: Cache/Restore source/.bmx Cache
      id: cache-source-bmx-windows-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-source-bmx-windows-x64
      with:
        path: ${{ github.workspace }}\source\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Cache/Restore Dig/.bmx Cache
      id: cache-source-dig-bmx-windows-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-source-dig-bmx-windows-x64
      with:
        path: ${{ github.workspace }}\source\Dig\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    
    - name: Compile TVTower (from checked out repo)
      run: |
        bmk.exe makeapp -r -g x64 -t gui TVTower.bmx
      shell: bash

    
    - name: Archive production artifacts (bin only)
      uses: actions/upload-artifact@v2
      with:
        name: TVTower_Win64.exe
        path: |
          TVTower_Win64.exe
        retention-days: 1



  job-build-windows-x86:
    #disable for now
    #if: ${{ false }}
    name: "Build Windows 32 Bit Binary"
    runs-on: windows-latest 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Setup latest BlitzMax NG version
      uses: gwron/setup-blitzmax-action@master
      id: bmx # set step reference ID
      with:
        bmx-version: ${{ github.event.inputs.bmx-ver }}
        
    
    - name: Cache Module Prebuilds
      id: cache-mod-windows-x86
      uses: actions/cache@v2
      env:
        cache-name: cache-mod-windows-x86
      with:
        path: ${{ steps.bmx.outputs.bmx-root }}/mod
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Cache/Restore source/.bmx Cache
      id: cache-source-bmx-windows-x86
      uses: actions/cache@v2
      env:
        cache-name: cache-source-bmx-windows-x86
      with:
        path: ${{ github.workspace }}\source\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}    
    
    - name: Cache/Restore Dig/.bmx Cache
      id: cache-source-dig-bmx-windows-x86
      uses: actions/cache@v2
      env:
        cache-name: cache-source-dig-bmx-windows-x86
      with:
        path: ${{ github.workspace }}\source\Dig\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    
   
    - name: Compile TVTower (from checked out repo)
      run: |
        bmk makeapp -r -g x86 -t gui TVTower.bmx
      shell: bash


    - name: Archive production artifacts (bin only)
      uses: actions/upload-artifact@v2
      with:
        name: TVTower_Win32.exe
        path: |
          TVTower_Win32.exe
        retention-days: 1


  job-build-mac-x64:
    #disable for now
    #if: ${{ false }}
    name: "Build Mac OS X Big Sur 64 Bit Binary"
    runs-on: macos-11
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Setup latest BlitzMax NG version
      uses: gwron/setup-blitzmax-action@v1
      id: bmx # set step reference ID
      with:
        bmx-version: ${{ github.event.inputs.bmx-ver }}
        
    
    - name: Cache Module Prebuilds
      id: cache-mod-mac-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-mod-mac-x64
      with:
        path: ${{ steps.bmx.outputs.bmx-root }}/mod
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Cache/Restore source/.bmx Cache
      id: cache-source-bmx-mac-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-source-bmx-mac-x64
      with:
        path: ${{ github.workspace }}\source\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}    
    
    - name: Cache/Restore Dig/.bmx Cache
      id: cache-source-dig-bmx-mac-x64
      uses: actions/cache@v2
      env:
        cache-name: cache-source-dig-bmx-mac-x64
      with:
        path: ${{ github.workspace }}\source\Dig\.bmx
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    
   
    - name: Compile TVTower (from checked out repo)
      run: |
        bmk makeapp -r -g x64 -t gui TVTower.bmx


    # artifact upload would else only upload content of TVTower.app
    - name: Prepare artifact upload
      run: |
        mkdir TVTower.app2
        mv TVTower.app TVTower.app2/
        mv TVTower.app2 TVTower.app

    
    - name: Archive production artifacts (bin only)
      uses: actions/upload-artifact@v2
      with:
        name: TVTower.app
        path: |
          TVTower.app
        retention-days: 1


  job-build-gamedata:
    name: "Build game data package"
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: "Clean Folder (remove non-needed stuff)"
      uses: ./.github/actions/clean-build-folder

    - name: Archive artifact
      uses: actions/upload-artifact@v2
      with:
        name: TVTower.GameData
        path: ${{ github.workspace }}/*
        retention-days: 1


  job-create-package:
    name: "Create nightly Package"
    needs: [job-build-linux-x64, job-build-linux-i386, job-build-windows-x64, job-build-windows-x86, job-build-mac-x64, job-build-gamedata]
    runs-on: ubuntu-18.04

    steps:
    - name: Download game data artifact
      uses: actions/download-artifact@v4.1.7
      with:
        name: TVTower.GameData

    - name: Download Mac OS X bin artifact
      uses: actions/download-artifact@v4.1.7
      with:
        name: TVTower.app

    - name: Download Linux i386 bin artifact
      uses: actions/download-artifact@v4.1.7
      with:
        name: TVTower_Linux32

    - name: Download Linux x64 bin artifact
      uses: actions/download-artifact@v4.1.7
      with:
        name: TVTower_Linux64

    - name: Download Windows 32bit bin artifact
      uses: actions/download-artifact@v4.1.7
      with:
        name: TVTower_Win32.exe

    - name: Download Windows 64bit bin artifact
      uses: actions/download-artifact@v4.1.7
      with:
        name: TVTower_Win64.exe

        
    - name: Fix file permissions
      run: |
        chmod 0755 TVTower_Linux32
        chmod 0755 TVTower_Linux64

    - name: Fix file permissions
      run: |
        chmod 0755 TVTower_Linux32
        chmod 0755 TVTower_Linux64


    - name: "Set an output parameter"
      id: set_today
      run: |
        echo "::set-output name=today::$(date -I)"

    - name: Zip game
      run: |
        zip -9 -r TVTower.Nightly.${{ github.ref_name }}.${{steps.set_today.outputs.today}}.zip *

    - name: Upload nightly artifact
      uses: actions/upload-artifact@v2
      with:
        name: TVTower.Nightly.${{ github.ref_name }}.${{steps.set_today.outputs.today}}.artifact
        path: TVTower.Nightly.${{ github.ref_name }}.${{steps.set_today.outputs.today}}.zip


    - name: "Delete unused artifacts"
      uses: geekyeggo/delete-artifact@v1
      with:
        failOnError: false
        name: |
          TVTower_Win64.exe
          TVTower_Win32.exe
          TVTower_Linux64
          TVTower_Linux32
          TVTower.app
          TVTower.GameData
      